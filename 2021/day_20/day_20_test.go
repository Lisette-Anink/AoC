package day_20

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"lisette.anink/aoc/utils"
)

func useTestData() []string {
	input := utils.ImportFileLines("test_input_20")
	lines := utils.SplitInMultiLines(input)
	return lines
}

func useInputData() []string {
	input := utils.ImportFromAoC("2021", "20")
	lines := utils.SplitInMultiLines(input)
	return lines
}

func Test_parseInput(t *testing.T) {
	type args struct {
		lines []string
	}
	tests := []struct {
		name                          string
		args                          args
		wantImageEnhancementAlgorithm map[int]string
		wantInputImage                map[[2]int]string
	}{
		{"small", args{[]string{"#..#..#", "###\n...\n#.#"}}, map[int]string{0: "#", 1: ".", 2: ".", 3: "#", 4: ".", 5: ".", 6: "#"},
			map[[2]int]string{{0, 0}: "#", {0, 1}: "#", {0, 2}: "#", {1, 0}: ".", {1, 1}: ".", {1, 2}: ".", {2, 0}: "#", {2, 1}: ".", {2, 2}: "#"}},
		{"test", args{useTestData()}, map[int]string{0: ".", 1: ".", 2: "#", 3: ".", 4: "#", 5: ".", 6: ".", 7: "#", 8: "#", 9: "#", 10: "#", 11: "#", 12: ".", 13: "#", 14: ".", 15: "#", 16: ".", 17: "#", 18: ".", 19: "#", 20: "#", 21: "#", 22: ".", 23: "#", 24: "#", 25: ".", 26: ".", 27: ".", 28: ".", 29: ".", 30: "#", 31: "#", 32: "#", 33: ".", 34: "#", 35: "#", 36: ".", 37: "#", 38: ".", 39: ".", 40: "#", 41: "#", 42: "#", 43: ".", 44: "#", 45: "#", 46: "#", 47: "#", 48: ".", 49: ".", 50: "#", 51: "#", 52: "#", 53: "#", 54: "#", 55: ".", 56: ".", 57: "#", 58: ".", 59: ".", 60: ".", 61: ".", 62: "#", 63: ".", 64: ".", 65: "#", 66: ".", 67: ".", 68: "#", 69: "#", 70: ".", 71: ".", 72: "#", 73: "#", 74: "#", 75: ".", 76: ".", 77: "#", 78: "#", 79: "#", 80: "#", 81: "#", 82: "#", 83: ".", 84: "#", 85: "#", 86: "#", 87: ".", 88: ".", 89: ".", 90: "#", 91: "#", 92: "#", 93: "#", 94: ".", 95: ".", 96: "#", 97: ".", 98: ".", 99: "#", 100: "#", 101: "#", 102: "#", 103: "#", 104: ".", 105: ".", 106: "#", 107: "#", 108: ".", 109: ".", 110: "#", 111: ".", 112: "#", 113: "#", 114: "#", 115: "#", 116: "#", 117: ".", 118: ".", 119: ".", 120: "#", 121: "#", 122: ".", 123: "#", 124: ".", 125: "#", 126: ".", 127: ".", 128: "#", 129: ".", 130: "#", 131: "#", 132: ".", 133: ".", 134: "#", 135: ".", 136: "#", 137: ".", 138: ".", 139: ".", 140: ".", 141: ".", 142: ".", 143: "#", 144: ".", 145: "#", 146: "#", 147: "#", 148: ".", 149: "#", 150: "#", 151: "#", 152: "#", 153: "#", 154: "#", 155: ".", 156: "#", 157: "#", 158: "#", 159: ".", 160: "#", 161: "#", 162: "#", 163: "#", 164: ".", 165: ".", 166: ".", 167: "#", 168: ".", 169: "#", 170: "#", 171: ".", 172: "#", 173: "#", 174: ".", 175: ".", 176: "#", 177: ".", 178: ".", 179: "#", 180: ".", 181: ".", 182: "#", 183: "#", 184: "#", 185: "#", 186: "#", 187: ".", 188: ".", 189: ".", 190: ".", 191: ".", 192: "#", 193: ".", 194: "#", 195: ".", 196: ".", 197: ".", 198: ".", 199: "#", 200: "#", 201: "#", 202: ".", 203: ".", 204: "#", 205: ".", 206: "#", 207: "#", 208: ".", 209: ".", 210: ".", 211: ".", 212: ".", 213: ".", 214: "#", 215: ".", 216: ".", 217: ".", 218: ".", 219: ".", 220: "#", 221: ".", 222: ".", 223: "#", 224: ".", 225: ".", 226: "#", 227: ".", 228: ".", 229: "#", 230: "#", 231: ".", 232: ".", 233: "#", 234: ".", 235: ".", 236: ".", 237: "#", 238: "#", 239: ".", 240: "#", 241: "#", 242: "#", 243: "#", 244: "#", 245: "#", 246: ".", 247: "#", 248: "#", 249: "#", 250: "#", 251: ".", 252: "#", 253: "#", 254: "#", 255: "#", 256: ".", 257: "#", 258: ".", 259: "#", 260: ".", 261: ".", 262: ".", 263: "#", 264: ".", 265: ".", 266: ".", 267: ".", 268: ".", 269: ".", 270: ".", 271: "#", 272: ".", 273: ".", 274: "#", 275: ".", 276: "#", 277: ".", 278: "#", 279: ".", 280: ".", 281: ".", 282: "#", 283: "#", 284: "#", 285: "#", 286: ".", 287: "#", 288: "#", 289: ".", 290: "#", 291: ".", 292: ".", 293: ".", 294: ".", 295: ".", 296: ".", 297: "#", 298: ".", 299: ".", 300: "#", 301: ".", 302: ".", 303: ".", 304: "#", 305: "#", 306: ".", 307: "#", 308: ".", 309: "#", 310: "#", 311: ".", 312: ".", 313: "#", 314: ".", 315: ".", 316: ".", 317: "#", 318: "#", 319: ".", 320: "#", 321: ".", 322: "#", 323: "#", 324: ".", 325: ".", 326: "#", 327: "#", 328: "#", 329: ".", 330: "#", 331: ".", 332: ".", 333: ".", 334: ".", 335: ".", 336: ".", 337: "#", 338: ".", 339: "#", 340: ".", 341: ".", 342: ".", 343: ".", 344: ".", 345: ".", 346: ".", 347: "#", 348: ".", 349: "#", 350: ".", 351: "#", 352: ".", 353: "#", 354: "#", 355: "#", 356: "#", 357: ".", 358: "#", 359: "#", 360: "#", 361: ".", 362: "#", 363: "#", 364: ".", 365: ".", 366: ".", 367: "#", 368: ".", 369: ".", 370: ".", 371: ".", 372: ".", 373: "#", 374: "#", 375: "#", 376: "#", 377: ".", 378: "#", 379: ".", 380: ".", 381: "#", 382: ".", 383: ".", 384: "#", 385: ".", 386: "#", 387: "#", 388: ".", 389: "#", 390: ".", 391: ".", 392: ".", 393: ".", 394: "#", 395: "#", 396: ".", 397: ".", 398: "#", 399: ".", 400: "#", 401: "#", 402: "#", 403: "#", 404: ".", 405: ".", 406: ".", 407: ".", 408: "#", 409: "#", 410: ".", 411: ".", 412: ".", 413: "#", 414: "#", 415: ".", 416: ".", 417: "#", 418: ".", 419: ".", 420: ".", 421: "#", 422: ".", 423: ".", 424: ".", 425: ".", 426: ".", 427: ".", 428: "#", 429: ".", 430: "#", 431: ".", 432: ".", 433: ".", 434: ".", 435: ".", 436: ".", 437: ".", 438: "#", 439: ".", 440: ".", 441: ".", 442: ".", 443: ".", 444: ".", 445: ".", 446: "#", 447: "#", 448: ".", 449: ".", 450: "#", 451: "#", 452: "#", 453: "#", 454: ".", 455: ".", 456: "#", 457: ".", 458: ".", 459: ".", 460: "#", 461: ".", 462: "#", 463: ".", 464: "#", 465: ".", 466: ".", 467: ".", 468: "#", 469: "#", 470: ".", 471: ".", 472: "#", 473: ".", 474: "#", 475: ".", 476: ".", 477: "#", 478: "#", 479: "#", 480: ".", 481: ".", 482: "#", 483: "#", 484: "#", 485: "#", 486: "#", 487: ".", 488: ".", 489: ".", 490: ".", 491: ".", 492: ".", 493: ".", 494: ".", 495: "#", 496: ".", 497: ".", 498: "#", 499: "#", 500: "#", 501: "#", 502: ".", 503: ".", 504: ".", 505: ".", 506: ".", 507: ".", 508: "#", 509: ".", 510: ".", 511: "#"},
			map[[2]int]string{{0, 0}: "#", {0, 1}: ".", {0, 2}: ".", {0, 3}: "#", {0, 4}: ".", {1, 0}: "#", {1, 1}: ".", {1, 2}: ".", {1, 3}: ".", {1, 4}: ".", {2, 0}: "#", {2, 1}: "#", {2, 2}: ".", {2, 3}: ".", {2, 4}: "#", {3, 0}: ".", {3, 1}: ".", {3, 2}: "#", {3, 3}: ".", {3, 4}: ".", {4, 0}: ".", {4, 1}: ".", {4, 2}: "#", {4, 3}: "#", {4, 4}: "#"}},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotImageEnhancementAlgorithm, gotInputImage := parseInput(tt.args.lines)
			assert.Equal(t, tt.wantImageEnhancementAlgorithm, gotImageEnhancementAlgorithm)
			assert.Equal(t, tt.wantInputImage, gotInputImage)
		})
	}
}

var testDataImage = map[[2]int]string{
	{0, 0}: "#", {0, 1}: ".", {0, 2}: ".", {0, 3}: "#", {0, 4}: ".",
	{1, 0}: "#", {1, 1}: ".", {1, 2}: ".", {1, 3}: ".", {1, 4}: ".",
	{2, 0}: "#", {2, 1}: "#", {2, 2}: ".", {2, 3}: ".", {2, 4}: "#",
	{3, 0}: ".", {3, 1}: ".", {3, 2}: "#", {3, 3}: ".", {3, 4}: ".",
	{4, 0}: ".", {4, 1}: ".", {4, 2}: "#", {4, 3}: "#", {4, 4}: "#"}
var testDataAlgorithm = map[int]string{0: ".", 1: ".", 2: "#", 3: ".", 4: "#", 5: ".", 6: ".", 7: "#", 8: "#", 9: "#", 10: "#", 11: "#", 12: ".", 13: "#", 14: ".", 15: "#", 16: ".", 17: "#", 18: ".", 19: "#", 20: "#", 21: "#", 22: ".", 23: "#", 24: "#", 25: ".", 26: ".", 27: ".", 28: ".", 29: ".", 30: "#", 31: "#", 32: "#", 33: ".", 34: "#", 35: "#", 36: ".", 37: "#", 38: ".", 39: ".", 40: "#", 41: "#", 42: "#", 43: ".", 44: "#", 45: "#", 46: "#", 47: "#", 48: ".", 49: ".", 50: "#", 51: "#", 52: "#", 53: "#", 54: "#", 55: ".", 56: ".", 57: "#", 58: ".", 59: ".", 60: ".", 61: ".", 62: "#", 63: ".", 64: ".", 65: "#", 66: ".", 67: ".", 68: "#", 69: "#", 70: ".", 71: ".", 72: "#", 73: "#", 74: "#", 75: ".", 76: ".", 77: "#", 78: "#", 79: "#", 80: "#", 81: "#", 82: "#", 83: ".", 84: "#", 85: "#", 86: "#", 87: ".", 88: ".", 89: ".", 90: "#", 91: "#", 92: "#", 93: "#", 94: ".", 95: ".", 96: "#", 97: ".", 98: ".", 99: "#", 100: "#", 101: "#", 102: "#", 103: "#", 104: ".", 105: ".", 106: "#", 107: "#", 108: ".", 109: ".", 110: "#", 111: ".", 112: "#", 113: "#", 114: "#", 115: "#", 116: "#", 117: ".", 118: ".", 119: ".", 120: "#", 121: "#", 122: ".", 123: "#", 124: ".", 125: "#", 126: ".", 127: ".", 128: "#", 129: ".", 130: "#", 131: "#", 132: ".", 133: ".", 134: "#", 135: ".", 136: "#", 137: ".", 138: ".", 139: ".", 140: ".", 141: ".", 142: ".", 143: "#", 144: ".", 145: "#", 146: "#", 147: "#", 148: ".", 149: "#", 150: "#", 151: "#", 152: "#", 153: "#", 154: "#", 155: ".", 156: "#", 157: "#", 158: "#", 159: ".", 160: "#", 161: "#", 162: "#", 163: "#", 164: ".", 165: ".", 166: ".", 167: "#", 168: ".", 169: "#", 170: "#", 171: ".", 172: "#", 173: "#", 174: ".", 175: ".", 176: "#", 177: ".", 178: ".", 179: "#", 180: ".", 181: ".", 182: "#", 183: "#", 184: "#", 185: "#", 186: "#", 187: ".", 188: ".", 189: ".", 190: ".", 191: ".", 192: "#", 193: ".", 194: "#", 195: ".", 196: ".", 197: ".", 198: ".", 199: "#", 200: "#", 201: "#", 202: ".", 203: ".", 204: "#", 205: ".", 206: "#", 207: "#", 208: ".", 209: ".", 210: ".", 211: ".", 212: ".", 213: ".", 214: "#", 215: ".", 216: ".", 217: ".", 218: ".", 219: ".", 220: "#", 221: ".", 222: ".", 223: "#", 224: ".", 225: ".", 226: "#", 227: ".", 228: ".", 229: "#", 230: "#", 231: ".", 232: ".", 233: "#", 234: ".", 235: ".", 236: ".", 237: "#", 238: "#", 239: ".", 240: "#", 241: "#", 242: "#", 243: "#", 244: "#", 245: "#", 246: ".", 247: "#", 248: "#", 249: "#", 250: "#", 251: ".", 252: "#", 253: "#", 254: "#", 255: "#", 256: ".", 257: "#", 258: ".", 259: "#", 260: ".", 261: ".", 262: ".", 263: "#", 264: ".", 265: ".", 266: ".", 267: ".", 268: ".", 269: ".", 270: ".", 271: "#", 272: ".", 273: ".", 274: "#", 275: ".", 276: "#", 277: ".", 278: "#", 279: ".", 280: ".", 281: ".", 282: "#", 283: "#", 284: "#", 285: "#", 286: ".", 287: "#", 288: "#", 289: ".", 290: "#", 291: ".", 292: ".", 293: ".", 294: ".", 295: ".", 296: ".", 297: "#", 298: ".", 299: ".", 300: "#", 301: ".", 302: ".", 303: ".", 304: "#", 305: "#", 306: ".", 307: "#", 308: ".", 309: "#", 310: "#", 311: ".", 312: ".", 313: "#", 314: ".", 315: ".", 316: ".", 317: "#", 318: "#", 319: ".", 320: "#", 321: ".", 322: "#", 323: "#", 324: ".", 325: ".", 326: "#", 327: "#", 328: "#", 329: ".", 330: "#", 331: ".", 332: ".", 333: ".", 334: ".", 335: ".", 336: ".", 337: "#", 338: ".", 339: "#", 340: ".", 341: ".", 342: ".", 343: ".", 344: ".", 345: ".", 346: ".", 347: "#", 348: ".", 349: "#", 350: ".", 351: "#", 352: ".", 353: "#", 354: "#", 355: "#", 356: "#", 357: ".", 358: "#", 359: "#", 360: "#", 361: ".", 362: "#", 363: "#", 364: ".", 365: ".", 366: ".", 367: "#", 368: ".", 369: ".", 370: ".", 371: ".", 372: ".", 373: "#", 374: "#", 375: "#", 376: "#", 377: ".", 378: "#", 379: ".", 380: ".", 381: "#", 382: ".", 383: ".", 384: "#", 385: ".", 386: "#", 387: "#", 388: ".", 389: "#", 390: ".", 391: ".", 392: ".", 393: ".", 394: "#", 395: "#", 396: ".", 397: ".", 398: "#", 399: ".", 400: "#", 401: "#", 402: "#", 403: "#", 404: ".", 405: ".", 406: ".", 407: ".", 408: "#", 409: "#", 410: ".", 411: ".", 412: ".", 413: "#", 414: "#", 415: ".", 416: ".", 417: "#", 418: ".", 419: ".", 420: ".", 421: "#", 422: ".", 423: ".", 424: ".", 425: ".", 426: ".", 427: ".", 428: "#", 429: ".", 430: "#", 431: ".", 432: ".", 433: ".", 434: ".", 435: ".", 436: ".", 437: ".", 438: "#", 439: ".", 440: ".", 441: ".", 442: ".", 443: ".", 444: ".", 445: ".", 446: "#", 447: "#", 448: ".", 449: ".", 450: "#", 451: "#", 452: "#", 453: "#", 454: ".", 455: ".", 456: "#", 457: ".", 458: ".", 459: ".", 460: "#", 461: ".", 462: "#", 463: ".", 464: "#", 465: ".", 466: ".", 467: ".", 468: "#", 469: "#", 470: ".", 471: ".", 472: "#", 473: ".", 474: "#", 475: ".", 476: ".", 477: "#", 478: "#", 479: "#", 480: ".", 481: ".", 482: "#", 483: "#", 484: "#", 485: "#", 486: "#", 487: ".", 488: ".", 489: ".", 490: ".", 491: ".", 492: ".", 493: ".", 494: ".", 495: "#", 496: ".", 497: ".", 498: "#", 499: "#", 500: "#", 501: "#", 502: ".", 503: ".", 504: ".", 505: ".", 506: ".", 507: ".", 508: "#", 509: ".", 510: ".", 511: "#"}

func Test_valFromWindow(t *testing.T) {
	type args struct {
		pos                            [2]int
		inputImage                     map[[2]int]string
		imageimageEnhancementAlgorithm map[int]string
		odd                            bool
	}
	tests := []struct {
		name string
		args args
		want string
	}{
		{"test 2,2", args{[2]int{2, 2}, testDataImage, testDataAlgorithm, true}, "#"},
		{"test 0,0", args{[2]int{0, 0}, testDataImage, testDataAlgorithm, true}, "."},
		{"test -1,-1", args{[2]int{-1, -1}, testDataImage, testDataAlgorithm, true}, "."},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got := valFromWindow(tt.args.pos, tt.args.inputImage, tt.args.imageimageEnhancementAlgorithm, tt.args.odd)
			assert.Equal(t, tt.want, got)
		})
	}
}

func Test_convertToAlgPos(t *testing.T) {
	type args struct {
		newVal string
	}
	tests := []struct {
		name string
		args args
		want int
	}{
		{"test 34", args{"...#...#."}, 34},
		{"test 18", args{"....#..#."}, 18},
		{"test 1", args{"........#"}, 1},
		{"test 511", args{"#########"}, 511},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got := convertToAlgPos(tt.args.newVal)
			assert.Equal(t, tt.want, got)
		})
	}
}

func Test_enhanceImage(t *testing.T) {
	type args struct {
		imageEnhancementAlgorithm map[int]string
		inputImage                map[[2]int]string
	}
	tests := []struct {
		name string
		args args
		want map[[2]int]string
	}{
		{"tinytest #", args{testDataAlgorithm, map[[2]int]string{{0, 0}: "#"}}, map[[2]int]string{{-1, -1}: ".", {-1, 0}: "#", {-1, 1}: "#", {0, -1}: "#", {0, 0}: ".", {0, 1}: "#", {1, -1}: ".", {1, 0}: "#", {1, 1}: "."}},
		{"test input", args{testDataAlgorithm, testDataImage}, map[[2]int]string{
			{-1, -1}: ".", {-1, 0}: "#", {-1, 1}: "#", {-1, 2}: ".", {-1, 3}: "#", {-1, 4}: "#", {-1, 5}: ".",
			{0, -1}: "#", {0, 0}: ".", {0, 1}: ".", {0, 2}: "#", {0, 3}: ".", {0, 4}: "#", {0, 5}: ".",
			{1, -1}: "#", {1, 0}: "#", {1, 1}: ".", {1, 2}: "#", {1, 3}: ".", {1, 4}: ".", {1, 5}: "#",
			{2, -1}: "#", {2, 0}: "#", {2, 1}: "#", {2, 2}: "#", {2, 3}: ".", {2, 4}: ".", {2, 5}: "#",
			{3, -1}: ".", {3, 0}: "#", {3, 1}: ".", {3, 2}: ".", {3, 3}: "#", {3, 4}: "#", {3, 5}: ".",
			{4, -1}: ".", {4, 0}: ".", {4, 1}: "#", {4, 2}: "#", {4, 3}: ".", {4, 4}: ".", {4, 5}: "#",
			{5, -1}: ".", {5, 0}: ".", {5, 1}: ".", {5, 2}: "#", {5, 3}: ".", {5, 4}: "#", {5, 5}: "."},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got := enhanceImage(tt.args.imageEnhancementAlgorithm, tt.args.inputImage, true)
			assert.Equal(t, tt.want, got)
		})
	}
}

func Test_countLightPix(t *testing.T) {
	type args struct {
		inputImage map[[2]int]string
	}
	tests := []struct {
		name string
		args args
		want int
	}{
		{"tinytest 3", args{map[[2]int]string{{-1, -1}: ".", {-1, 0}: "#", {-1, 1}: ".", {0, -1}: "#", {0, 0}: ".", {0, 1}: ".", {1, -1}: ".", {1, 0}: "#", {1, 1}: "."}}, 3},
		{"tinytest 5", args{map[[2]int]string{{-1, -1}: ".", {-1, 0}: "#", {-1, 1}: "#", {0, -1}: "#", {0, 0}: ".", {0, 1}: "#", {1, -1}: ".", {1, 0}: "#", {1, 1}: "."}}, 5},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got := countLightPix(tt.args.inputImage)
			assert.Equal(t, tt.want, got)
		})
	}
}

func Test_countLightPixAfterXSteps(t *testing.T) {
	iEA, inIm := parseInput(useInputData())
	type args struct {
		imageEnhancementAlgorithm map[int]string
		inputImage                map[[2]int]string
		steps                     int
	}
	tests := []struct {
		name string
		args args
		want int
	}{
		{"test 2", args{testDataAlgorithm, testDataImage, 2}, 35},
		{"part 2 test 50", args{testDataAlgorithm, testDataImage, 50}, 35},
		{"Part 1", args{iEA, inIm, 2}, 4968},
		{"Part 2", args{iEA, inIm, 50}, 4968},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got := countLightPixAfterXSteps(tt.args.imageEnhancementAlgorithm, tt.args.inputImage, tt.args.steps)
			assert.Equal(t, tt.want, got)
		})
	}
}

func Test_oddStep(t *testing.T) {
	type args struct {
		i int
	}
	tests := []struct {
		name string
		args args
		want bool
	}{
		{"0", args{0}, true},
		{"1", args{1}, false},
		{"2", args{2}, true},
		{"301", args{301}, false},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := oddStep(tt.args.i); got != tt.want {
				t.Errorf("oddStep() = %v, want %v", got, tt.want)
			}
		})
	}
}
